
import asyncio
import logging
import sqlite3
import time
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramRetryAfter

from config import (
    ADMIN_ID, topics_dict, workers_dict, rename_topics_dict, sos_words,
    active_topics, active_topics_info, sos_activation_times, sos_removal_tasks,
    sos_update_tasks, restricted_topics, admin_list, breaks_dict, break_id_counter,
    break_tasks, pc_mode_enabled, KYIV_TZ
)
from utils import (
    check_forum_support, is_admin, clear_rename_context, create_active_topics_thread,
    update_active_topics_message, auto_remove_sos, update_sos_times, get_available_pcs,
    take_pc, release_pc, add_pcs, clear_all_pcs, schedule_break_tasks
)

router = Router()

class TopicStates(StatesGroup):
    waiting_for_topic_name = State()
    waiting_for_topic_id = State()
    waiting_for_broadcast = State()
    waiting_for_rename_count = State()
    waiting_for_rename = State()
    waiting_for_pc_selection = State()
    waiting_for_break_name = State()
    waiting_for_break_start_time = State()
    waiting_for_break_start_text = State()
    waiting_for_break_end_time = State()
    waiting_for_break_end_text = State()

@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(chat_id, user_id, message.bot)

    keyboard = [
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data='list_topics')],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É", callback_data='create_topic')],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data='delete_topic')],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã", callback_data='delete_all_topics')],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='create_broadcast')],
        [InlineKeyboardButton(text="üñå –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", callback_data='create_rename_topics')]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ—Ä—ã–≤" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_user_admin:
        keyboard.append([InlineKeyboardButton(text="‚òï –ü–µ—Ä–µ—Ä—ã–≤", callback_data='break_menu')])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    greeting_message = await message.answer("üëã")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ª–∞–¥–æ—à–∫–∏ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥
    async def delete_greeting():
        await asyncio.sleep(0.5)
        try:
            await message.bot.delete_message(
                chat_id=greeting_message.chat.id,
                message_id=greeting_message.message_id
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {str(e)}")

    asyncio.create_task(delete_greeting())

    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

@router.callback_query(F.data.in_(['list_topics', 'create_topic', 'delete_topic', 'delete_all_topics', 
                                   'create_broadcast', 'create_rename_topics', 'break_menu', 'create_break',
                                   'list_breaks', 'back_to_start']))
async def button_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∫—Ä–æ–º–µ confirm_rename –∏ select_pc
    if not callback.data.startswith('confirm_rename_') and not callback.data.startswith('select_pc_') and not callback.data.startswith('occupied_pc_'):
        if not await is_admin(chat_id, user_id, callback.bot):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

    await callback.answer()

    if callback.data == 'list_topics':
        await list_topics(callback)
    elif callback.data == 'create_topic':
        await request_topic_name(callback, state)
    elif callback.data == 'delete_topic':
        await request_topic_id(callback, state)
    elif callback.data == 'delete_all_topics':
        await delete_all_topics(callback)
    elif callback.data == 'create_broadcast':
        await request_broadcast_message(callback, state)
    elif callback.data == 'create_rename_topics':
        await request_rename_topics_count(callback, state)
    elif callback.data == 'break_menu':
        await show_break_menu(callback)
    elif callback.data == 'create_break':
        await request_break_name(callback, state)
    elif callback.data == 'list_breaks':
        await list_breaks(callback)
    elif callback.data == 'back_to_start':
        await start_menu_after_back(callback)

@router.callback_query(F.data.startswith('delete_break_'))
async def delete_break_callback(callback: CallbackQuery):
    break_id = int(callback.data.split('_')[2])
    await delete_break(callback, break_id)

@router.callback_query(F.data.startswith('confirm_rename_'))
async def handle_rename_confirmation(callback: CallbackQuery, state: FSMContext):
    topic_id = int(callback.data.split('_')[2])
    chat_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    if (chat_id not in rename_topics_dict or 
        topic_id not in rename_topics_dict[chat_id] or
        chat_id not in topics_dict or
        topic_id not in topics_dict[chat_id]):
        await callback.answer("‚ùå –≠—Ç–∞ —Ç–µ–º–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    await state.update_data(
        current_rename_topic={
            'chat_id': chat_id,
            'topic_id': topic_id,
            'old_name': topics_dict[chat_id][topic_id]
        },
        waiting_for_rename=True,
        confirmation_message_id=callback.message.message_id
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
    message = await callback.message.answer(
        "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º–µ.\n"
        "> ‚õîÔ∏è –ë–µ–∑ —ç—Ç–æ–≥–æ —Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ ¬´–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è¬ª –∏ –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π.",
        parse_mode='Markdown'
    )
    
    await state.update_data(request_name_message_id=message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º—É
    await callback.bot.send_message(
        chat_id=chat_id,
        message_thread_id=topic_id,
        text="‚ôªÔ∏è –î–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).\n"
             "üö´ –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ –¥–≤—É—Ö —Ç–µ–º, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∞—Ç–æ–≤."
    )

    await state.set_state(TopicStates.waiting_for_rename)
    await callback.answer()

@router.callback_query(F.data.startswith('select_pc_'))
async def handle_pc_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ü–ö"""
    await callback.answer()

    pc_id = int(callback.data.split('_')[2])
    data = await state.get_data()
    topic_data = data.get('current_rename_topic')
    topic_name = data.get('topic_name')

    if not topic_data or not topic_name:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–µ")
        await state.clear()
        return

    chat_id = topic_data['chat_id']
    topic_id = topic_data['topic_id']
    old_name = topic_data['old_name']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
    if ":" not in old_name:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã")
        await state.clear()
        return

    number = old_name.split(":")[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ü–ö –µ—â—ë –¥–æ—Å—Ç—É–ø–µ–Ω
    conn = sqlite3.connect('pc_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_available FROM pc_list WHERE id = ?', (pc_id,))
    result = cursor.fetchone()
    conn.close()

    if not result or not result[0]:
        await callback.answer("‚ùå –≠—Ç–æ—Ç –ü–ö —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", show_alert=True)
        return

    # –ó–∞–Ω–∏–º–∞–µ–º –ü–ö
    take_pc(pc_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –Ω–æ–º–µ—Ä–æ–º –ü–ö
    final_topic_name = f"{number}:{topic_name} (#–ü–ö{pc_id})"

    try:
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–º—É
        await callback.bot.edit_forum_topic(
            chat_id=chat_id,
            message_thread_id=topic_id,
            name=final_topic_name
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ–º
        topics_dict[chat_id][topic_id] = final_topic_name
        if chat_id in rename_topics_dict:
            rename_topics_dict[chat_id].discard(topic_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ü–ö
        try:
            pc_selection_message_id = data.get('pc_selection_message_id')
            if pc_selection_message_id:
                await callback.bot.delete_message(
                    chat_id=chat_id,
                    message_id=pc_selection_message_id
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ü–ö: {str(e)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.bot.send_message(
            chat_id=chat_id,
            message_thread_id=topic_id,
            text=f"‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {final_topic_name}\nüñ•Ô∏è –ü–ö {pc_id} –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –≤–∞–º–∏"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
        chat = await callback.bot.get_chat(chat_id)
        if chat.username:
            topic_link = f"https://t.me/{chat.username}/{topic_id}"
        else:
            topic_link = f"https://t.me/c/{str(chat_id)[4:]}/{topic_id}"

        topic_info_message = (
            f"–¢–µ–º—ã üÜî: {topic_id}\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {final_topic_name}\n"
            f"–ü–ö: {pc_id}\n"
            f"–°—Å—ã–ª–∫–∞ üîó –Ω–∞ —Ç–µ–º—É: {topic_link}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
        await callback.bot.send_message(
            chat_id=chat_id,
            message_thread_id=topic_id,
            text=topic_info_message,
            disable_web_page_preview=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –≤ –õ–° (–µ—Å–ª–∏ ADMIN_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if ADMIN_ID != 0:
            try:
                await callback.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"–ù–æ–≤–∞—è —Ç–µ–º–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n\n{topic_info_message}",
                    disable_web_page_preview=True
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {str(e)}")

    except Exception as e:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ü–ö
        release_pc(pc_id)
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}")

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.clear()

@router.callback_query(F.data.startswith('occupied_pc_'))
async def occupied_pc_callback(callback: CallbackQuery):
    pc_id = callback.data.split('_')[2]
    await callback.answer(f"–ü–ö {pc_id} —É–∂–µ –∑–∞–Ω—è—Ç", show_alert=True)

async def request_topic_name(callback: CallbackQuery, state: FSMContext):
    chat = await callback.bot.get_chat(callback.message.chat.id)

    if chat.type in ['group', 'supergroup']:
        if await check_forum_support(chat.id, callback.bot):
            await callback.message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã:"
            )
            await state.set_state(TopicStates.waiting_for_topic_name)
        else:
            await callback.message.answer(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
    else:
        await callback.message.answer(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
        )

@router.message(TopicStates.waiting_for_topic_name)
async def create_topic_with_name(message: Message, state: FSMContext):
    text = message.text
    chat = await message.bot.get_chat(message.chat.id)

    if not await check_forum_support(chat.id, message.bot):
        await message.answer(
            "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º"
        )
        await state.clear()
        return

    try:
        if text.isdigit():
            count = int(text)
            if count > 10:
                await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–µ –±–æ–ª—å—à–µ 10 —Ç–µ–º")
                await state.clear()
                return

            for i in range(1, count + 1):
                topic_name = f"–ü–ö{i}"
                await create_single_topic(chat.id, topic_name, message.bot)
            await message.answer(f"–°–æ–∑–¥–∞–Ω–æ {count} —Ç–µ–º")
        else:
            topics = [t.strip() for t in text.split('\n') if t.strip()]
            if len(topics) > 10:
                 await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ —Ç–µ–º, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–µ –±–æ–ª—å—à–µ 10 —Ç–µ–º")
                 await state.clear()
                 return

            for topic_name in topics:
                await create_single_topic(chat.id, topic_name, message.bot)
            await message.answer(f"–°–æ–∑–¥–∞–Ω–æ {len(topics)} —Ç–µ–º")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")

    await state.clear()

async def create_single_topic(chat_id: int, topic_name: str, bot: Bot):
    try:
        topic = await bot.create_forum_topic(
            chat_id=chat_id,
            name=topic_name
        )

        if chat_id not in topics_dict:
            topics_dict[chat_id] = {}
        topics_dict[chat_id][topic.message_thread_id] = topic_name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {topic_name}: {str(e)}")

async def request_topic_id(callback: CallbackQuery, state: FSMContext):
    chat = await callback.bot.get_chat(callback.message.chat.id)

    if chat.type in ['group', 'supergroup']:
        if await check_forum_support(chat.id, callback.bot):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –∏—Ö ID
            if chat.id in topics_dict and topics_dict[chat.id]:
                topics_list = "\n".join([
                    f"- {name} (ID: {topic_id})"
                    for topic_id, name in topics_dict[chat.id].items()
                ])
                await callback.message.answer(
                    f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º:\n{topics_list}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
                )
                await state.set_state(TopicStates.waiting_for_topic_id)
            else:
                await callback.message.answer(
                    "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º. "
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'."
                )
        else:
            await callback.message.answer(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º."
            )
    else:
        await callback.message.answer(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
        )

@router.message(TopicStates.waiting_for_topic_id)
async def delete_topic_by_id(message: Message, state: FSMContext):
    topic_id = message.text
    chat = await message.bot.get_chat(message.chat.id)

    try:
        topic_id = int(topic_id)
        if chat.id not in topics_dict or topic_id not in topics_dict[chat.id]:
             await message.answer(
                "–¢–µ–º–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–°–ø–∏—Å–æ–∫ —Ç–µ–º' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º."
            )
             await state.clear()
             return

        topic_name = topics_dict[chat.id][topic_id]
        await message.bot.delete_forum_topic(
            chat_id=chat.id,
            message_thread_id=topic_id
        )
        del topics_dict[chat.id][topic_id]
        await message.answer(
            f"–¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ–º—ã (—á–∏—Å–ª–æ)."
        )
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}"
        )

    await state.clear()

async def list_topics(callback: CallbackQuery):
    try:
        chat = await callback.bot.get_chat(callback.message.chat.id)

        if chat.type not in ['group', 'supergroup']:
            await callback.message.answer(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
            )
            return

        if not chat.is_forum:
            await callback.message.answer(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º."
            )
            return

        if chat.id in topics_dict and topics_dict[chat.id]:
            topics_list = "\n".join([
                f"- {name} (ID: {topic_id})"
                for topic_id, name in topics_dict[chat.id].items()
            ])
            await callback.message.answer(
                f"–°–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –≥—Ä—É–ø–ø–µ {chat.title}:\n{topics_list}"
            )
        else:
            await callback.message.answer(
                "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º. "
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'."
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏: {str(e)}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )

async def delete_all_topics(callback: CallbackQuery):
    chat = await callback.bot.get_chat(callback.message.chat.id)

    if chat.type not in ['group', 'supergroup']:
        await callback.message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, callback.bot):
        await callback.message.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await callback.message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    deleted_count = 0
    for topic_id in list(topics_dict[chat.id].keys()):
        try:
            await callback.bot.delete_forum_topic(
                chat_id=chat.id,
                message_thread_id=topic_id
            )
            deleted_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã {topic_id}: {str(e)}")

    topics_dict[chat.id] = {}
    if chat.id in workers_dict:
        workers_dict[chat.id] = {}

    await callback.message.answer(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ–º")

async def request_broadcast_message(callback: CallbackQuery, state: FSMContext):
    chat = await callback.bot.get_chat(callback.message.chat.id)

    if chat.type not in ['group', 'supergroup']:
        await callback.message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, callback.bot):
        await callback.message.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await callback.message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —Ç–µ–º—ã:")
    await state.set_state(TopicStates.waiting_for_broadcast)

@router.message(TopicStates.waiting_for_broadcast)
async def send_broadcast(message: Message, state: FSMContext):
    message_text = message.text
    chat = await message.bot.get_chat(message.chat.id)

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        await state.clear()
        return

    sent_count = 0
    for topic_id in topics_dict[chat.id].keys():
        try:
            await message.bot.send_message(
                chat_id=chat.id,
                message_thread_id=topic_id,
                text=message_text
            )
            sent_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É {topic_id}: {str(e)}")

    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count} —Ç–µ–º")
    await state.clear()

async def request_rename_topics_count(callback: CallbackQuery, state: FSMContext):
    chat = await callback.bot.get_chat(callback.message.chat.id)

    if chat.type not in ['group', 'supergroup']:
        await callback.message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, callback.bot):
        await callback.message.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    await state.set_state(TopicStates.waiting_for_rename_count)

@router.message(TopicStates.waiting_for_rename_count)
async def create_rename_topics(message: Message, state: FSMContext):
    global break_id_counter
    
    try:
        count = int(message.text)
        if count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            await state.clear()
            return

        chat = await message.bot.get_chat(message.chat.id)

        if chat.id not in rename_topics_dict:
            rename_topics_dict[chat.id] = set()

        created_count = 0
        for i in range(1, count + 1):
            try:
                topic = await message.bot.create_forum_topic(
                    chat_id=chat.id,
                    name=f"{i}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                )

                if chat.id not in topics_dict:
                    topics_dict[chat.id] = {}
                topics_dict[chat.id][topic.message_thread_id] = f"{i}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                rename_topics_dict[chat.id].add(topic.message_thread_id)

                keyboard = [[InlineKeyboardButton(text="‚úÖ", callback_data=f'confirm_rename_{topic.message_thread_id}')]]
                reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

                try:
                    await message.bot.send_message(
                        chat_id=chat.id,
                        message_thread_id=topic.message_thread_id,
                        text="üåè –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                             "‚ÑπÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –≥–∞–ª–æ—á–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                        reply_markup=reply_markup
                    )
                except TelegramRetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    await message.bot.send_message(
                        chat_id=chat.id,
                        message_thread_id=topic.message_thread_id,
                        text="üåè –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                             "‚ÑπÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –≥–∞–ª–æ—á–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                        reply_markup=reply_markup
                    )

                created_count += 1

                if i < count:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–º—ã
                    await asyncio.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ–º

            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
                continue
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {i}: {str(e)}")

        try:
            await message.answer(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await message.answer(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        try:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")

    await state.clear()

@router.message(TopicStates.waiting_for_rename)
async def rename_topic(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if not message.reply_to_message:
        return

    data = await state.get_data()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
    request_message_id = data.get('request_name_message_id')
    if not request_message_id or message.reply_to_message.message_id != request_message_id:
        return

    new_name = message.text.strip()
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:")
        return

    topic_data = data.get('current_rename_topic')
    if not topic_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
    await state.update_data(topic_name=new_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö
    if not pc_mode_enabled:
        # –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö –æ—Ç–∫–ª—é—á–µ–Ω - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–º—É –±–µ–∑ –ü–ö
        chat_id = topic_data['chat_id']
        topic_id = topic_data['topic_id']
        old_name = topic_data['old_name']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
        if ":" not in old_name:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã")
            await state.clear()
            return

        number = old_name.split(":")[0]
        final_topic_name = f"{number}:{new_name}"

        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–º—É
            await message.bot.edit_forum_topic(
                chat_id=chat_id,
                message_thread_id=topic_id,
                name=final_topic_name
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ–º
            topics_dict[chat_id][topic_id] = final_topic_name
            if chat_id in rename_topics_dict:
                rename_topics_dict[chat_id].discard(topic_id)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                confirmation_message_id = data.get('confirmation_message_id')
                request_name_message_id = data.get('request_name_message_id')
                
                if confirmation_message_id:
                    await message.bot.delete_message(
                        chat_id=chat_id,
                        message_id=confirmation_message_id
                    )
                if request_name_message_id:
                    await message.bot.delete_message(
                        chat_id=chat_id,
                        message_id=request_name_message_id
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.bot.send_message(
                chat_id=chat_id,
                message_thread_id=topic_id,
                text=f"‚úÖ –¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {final_topic_name}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            chat = await message.bot.get_chat(chat_id)
            if chat.username:
                topic_link = f"https://t.me/{chat.username}/{topic_id}"
            else:
                topic_link = f"https://t.me/c/{str(chat_id)[4:]}/{topic_id}"

            topic_info_message = (
                f"–¢–µ–º—ã üÜî: {topic_id}\n"
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {final_topic_name}\n"
                f"–°—Å—ã–ª–∫–∞ üîó –Ω–∞ —Ç–µ–º—É: {topic_link}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ–ø–∏–∫
            await message.bot.send_message(
                chat_id=chat_id,
                message_thread_id=topic_id,
                text=topic_info_message,
                disable_web_page_preview=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É –≤ –õ–° (–µ—Å–ª–∏ ADMIN_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if ADMIN_ID != 0:
                try:
                    await message.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"–ù–æ–≤–∞—è —Ç–µ–º–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n\n{topic_info_message}",
                        disable_web_page_preview=True
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {str(e)}")

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.clear()
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ü–ö (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
    available_pcs = get_available_pcs()

    if not available_pcs:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ü–ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ü–ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('pc_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, is_available FROM pc_list ORDER BY id')
    all_pcs = cursor.fetchall()
    conn.close()

    if not all_pcs:
        await message.answer("‚ùå –ü–ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ü–ö
    keyboard = []
    row = []
    for pc_id, is_available in all_pcs:
        if is_available:
            button_text = str(pc_id)
            callback_data = f'select_pc_{pc_id}'
        else:
            button_text = f"{pc_id}‚ùå"
            callback_data = f'occupied_pc_{pc_id}'

        row.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
        if len(row) == 5:  # –ü–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        confirmation_message_id = data.get('confirmation_message_id')
        request_name_message_id = data.get('request_name_message_id')
        
        if confirmation_message_id:
            await message.bot.delete_message(
                chat_id=topic_data['chat_id'],
                message_id=confirmation_message_id
            )
        if request_name_message_id:
            await message.bot.delete_message(
                chat_id=topic_data['chat_id'],
                message_id=request_name_message_id
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ü–ö
    pc_selection_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ü–ö –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏:\n(–Ω–∞–∫–ª–µ–π–∫–∞ –≤ —É–≥–æ–ª–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∞, –∏–ª–∏ —Å–≤–µ—Ä—Ö—É –≤ —É–≥–æ–ª–∫—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –±–ª–æ–∫–∞)",
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(pc_selection_message_id=pc_selection_message.message_id)
    await state.set_state(TopicStates.waiting_for_pc_selection)

# Break management functions
async def show_break_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏"""
    breaks_count = len(breaks_dict)

    keyboard = []

    if breaks_count < 5:
        keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data='create_break')])

    if breaks_count > 0:
        keyboard.append([InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤", callback_data='list_breaks')])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        f"‚òï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {breaks_count}/5\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö, "
        f"–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–æ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=reply_markup
    )

async def request_break_name(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    await callback.message.edit_text(
        "‚òï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞\n"
        "–ü—Ä–∏–º–µ—Ä: –ö–æ—Ñ–µ –ë—Ä–µ–π–∫"
    )

    await state.set_state(TopicStates.waiting_for_break_name)

@router.message(TopicStates.waiting_for_break_name)
async def process_break_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    break_name = message.text.strip()

    if len(break_name) > 50:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞:"
        )
        return

    await state.update_data(break_data={'name': break_name})

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {break_name}\n\n"
        "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–ø–æ –ö–∏–µ–≤—É)\n"
        "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 10:00"
    )

    await state.set_state(TopicStates.waiting_for_break_start_time)

@router.message(TopicStates.waiting_for_break_start_time)
async def process_break_start_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    time_text = message.text.strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_obj = datetime.strptime(time_text, "%H:%M").time()

        data = await state.get_data()
        break_data = data['break_data']
        break_data['start_time'] = time_text
        await state.update_data(break_data=break_data)

        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {time_text}\n\n"
            "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞\n"
            "–ü—Ä–∏–º–µ—Ä: –í—Å–µ —É—Ö–æ–¥–∏–º –Ω–∞ –∫–æ—Ñ–µ –±—Ä–µ–π–∫!"
        )

        await state.set_state(TopicStates.waiting_for_break_start_text)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 10:00\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞:"
        )

@router.message(TopicStates.waiting_for_break_start_text)
async def process_break_start_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    start_text = message.text.strip()

    if len(start_text) > 200:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞:"
        )
        return

    data = await state.get_data()
    break_data = data['break_data']
    break_data['start_text'] = start_text
    await state.update_data(break_data=break_data)

    await message.answer(
        f"‚úÖ –¢–µ–∫—Å—Ç –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ (–ø–æ –ö–∏–µ–≤—É)\n"
        "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 11:00"
    )

    await state.set_state(TopicStates.waiting_for_break_end_time)

@router.message(TopicStates.waiting_for_break_end_time)
async def process_break_end_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞"""
    time_text = message.text.strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        end_time_obj = datetime.strptime(time_text, "%H:%M").time()
        
        data = await state.get_data()
        start_time_obj = datetime.strptime(data['break_data']['start_time'], "%H:%M").time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        if end_time_obj <= start_time_obj:
            await message.answer(
                "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞:"
            )
            return

        break_data = data['break_data']
        break_data['end_time'] = time_text
        await state.update_data(break_data=break_data)

        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {time_text}\n\n"
            "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞\n"
            "–ü—Ä–∏–º–µ—Ä: –û–±—Ä–∞—Ç–Ω–æ –∑–∞ —Ä–∞–±–æ—Ç—É!"
        )

        await state.set_state(TopicStates.waiting_for_break_end_text)

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 11:00\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞:"
        )

@router.message(TopicStates.waiting_for_break_end_text)
async def process_break_end_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤"""
    global break_id_counter

    end_text = message.text.strip()

    if len(end_text) > 200:
        await message.answer(
            "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
    data = await state.get_data()
    break_data = data['break_data']
    break_data['end_text'] = end_text

    break_id = break_id_counter
    breaks_dict[break_id] = break_data
    break_id_counter += 1

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞
    await schedule_break_tasks(break_id, break_data, message.bot)

    await message.answer(
        f"‚úÖ –ü–µ—Ä–µ—Ä—ã–≤ '{break_data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üìã –î–µ—Ç–∞–ª–∏:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {break_data['name']}\n"
        f"–ù–∞—á–∞–ª–æ: {break_data['start_time']} - {break_data['start_text']}\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {break_data['end_time']} - {break_data['end_text']}\n\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )

    await state.clear()

async def list_breaks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤"""
    if not breaks_dict:
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –ø—É—Å—Ç\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ—Ä—ã–≤, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∑–¥–µ—Å—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='break_menu')
            ]])
        )
        return

    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã:\n\n"
    keyboard = []

    for break_id, break_data in breaks_dict.items():
        text += (
            f"üî∏ {break_data['name']}\n"
            f"   –ù–∞—á–∞–ª–æ: {break_data['start_time']}\n"
            f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {break_data['end_time']}\n\n"
        )
        keyboard.append([InlineKeyboardButton(
            text=f"üóë –£–¥–∞–ª–∏—Ç—å '{break_data['name']}'", 
            callback_data=f'delete_break_{break_id}'
        )])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='break_menu')])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(text, reply_markup=reply_markup)

async def delete_break(callback: CallbackQuery, break_id: int):
    """–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤"""
    if break_id not in breaks_dict:
        await callback.answer("–ü–µ—Ä–µ—Ä—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    break_name = breaks_dict[break_id]['name']

    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
    if break_id in break_tasks:
        for task in break_tasks[break_id]:
            if not task.done():
                task.cancel()
        del break_tasks[break_id]

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Ä—ã–≤
    del breaks_dict[break_id]

    await callback.answer(f"–ü–µ—Ä–µ—Ä—ã–≤ '{break_name}' —É–¥–∞–ª–µ–Ω!", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
    await list_breaks(callback)

async def start_menu_after_back(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_user_admin = await is_admin(chat_id, user_id, callback.bot)

    keyboard = [
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data='list_topics')],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É", callback_data='create_topic')],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data='delete_topic')],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã", callback_data='delete_all_topics')],
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='create_broadcast')],
        [InlineKeyboardButton(text="üñå –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", callback_data='create_rename_topics')]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ—Ä—ã–≤" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_user_admin:
        keyboard.append([InlineKeyboardButton(text="‚òï –ü–µ—Ä–µ—Ä—ã–≤", callback_data='break_menu')])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

# Commands
@router.message(Command("worker"))
async def worker_command(message: Message):
    chat_id = message.chat.id
    message_thread_id = message.message_thread_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–º–µ
    if not message_thread_id:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /worker –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /worker @user1 @user2 ...")
        return

    users = args

    if not users:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    chat = await message.bot.get_chat(chat_id)

    if not await check_forum_support(chat.id, message.bot):
        await message.answer("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if chat_id not in workers_dict:
        workers_dict[chat_id] = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    if message_thread_id not in workers_dict[chat_id]:
        workers_dict[chat_id][message_thread_id] = []

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    existing_workers = set(workers_dict[chat_id][message_thread_id])
    new_workers = []

    for user in users:
        if user not in existing_workers:
            workers_dict[chat_id][message_thread_id].append(user)
            new_workers.append(user)

    if new_workers:
        new_workers_text = " ".join(new_workers)
        all_workers_text = " ".join(workers_dict[chat_id][message_thread_id])

        topic_name = topics_dict.get(chat_id, {}).get(message_thread_id, f"–¢–µ–º–∞ {message_thread_id}")

        await message.answer(
            f"‚úÖ –í–æ—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ–º—É '{topic_name}'\n"
            f"–ù–æ–≤—ã–µ –≤–æ—Ä–∫–µ—Ä—ã: {new_workers_text}\n"
            f"–í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã —Ç–µ–º—ã: {all_workers_text}"
        )
    else:
        await message.answer("–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏ —ç—Ç–æ–π —Ç–µ–º—ã")

@router.message(Command("only"))
async def only_command(message: Message):
    chat_id = message.chat.id
    message_thread_id = message.message_thread_id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–º–µ
    if not message_thread_id:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /only –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin(chat_id, user_id, message.bot):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –∏—Ö
        if (chat_id in restricted_topics and 
            message_thread_id in restricted_topics[chat_id]):
            # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            del restricted_topics[chat_id][message_thread_id]
            if not restricted_topics[chat_id]:
                del restricted_topics[chat_id]

            topic_name = topics_dict.get(chat_id, {}).get(message_thread_id, f"–¢–µ–º–∞ {message_thread_id}")
            await message.answer(
                f"üîì –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–º–µ '{topic_name}' —Å–Ω—è—Ç—ã.\n"
                "–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–π —Ç–µ–º–µ."
            )
        else:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /only @user1 @user2 ... - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–º–µ\n"
                "/only - —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å —Ç–µ–º—ã"
            )
        return

    users = args

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in restricted_topics:
        restricted_topics[chat_id] = {}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã
    restricted_topics[chat_id][message_thread_id] = users

    users_text = " ".join(users)
    topic_name = topics_dict.get(chat_id, {}).get(message_thread_id, f"–¢–µ–º–∞ {message_thread_id}")

    await message.answer(
        f"üîí –î–æ—Å—Ç—É–ø –∫ —Ç–µ–º–µ '{topic_name}' –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
        f"–ü–∏—Å–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ: {users_text}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–≥–¥–∞.\n\n"
        f"–î–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /only"
    )

@router.message(Command("new"))
async def new_command(message: Message):
    chat_id = message.chat.id
    message_thread_id = message.message_thread_id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–º–µ
    if not message_thread_id:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /new –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin(chat_id, user_id, message.bot):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ —Ç–µ–º–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ —Ç–µ–º
    if (chat_id not in topics_dict or 
        message_thread_id not in topics_dict[chat_id]):
        await message.answer("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    current_name = topics_dict[chat_id][message_thread_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç ":")
    if ":" not in current_name:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–º—ã
    number = current_name.split(":")[0]
    new_name = f"{number}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    try:
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ –≤ "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        await message.bot.edit_forum_topic(
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            name=new_name
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ–º
        topics_dict[chat_id][message_thread_id] = new_name

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        if chat_id not in rename_topics_dict:
            rename_topics_dict[chat_id] = set()
        rename_topics_dict[chat_id].add(message_thread_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∞–ª–æ—á–∫–æ–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        keyboard = [[InlineKeyboardButton(text="‚úÖ", callback_data=f'confirm_rename_{message_thread_id}')]]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.bot.send_message(
            chat_id=chat_id,
            message_thread_id=message_thread_id,
            text="üåè –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                 "‚ÑπÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –≥–∞–ª–æ—á–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
            reply_markup=reply_markup
        )

        await message.answer(f"‚úÖ –¢–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {new_name}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–µ–º—ã: {str(e)}")

@router.message(Command("pc"))
async def pc_command(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –ü–ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    global pc_mode_enabled
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(chat_id, user_id, message.bot):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ö
        mode_status = "–≤–∫–ª—é—á–µ–Ω" if pc_mode_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω"
        available_pcs = get_available_pcs()
        if available_pcs and pc_mode_enabled:
            pcs_text = ", ".join(map(str, available_pcs))
            await message.answer(
                f"üìã –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö: {mode_status}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ü–ö: {pcs_text}\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/pc <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –ü–ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /pc 20)\n"
                "/pc 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö\n"
                "/pc clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ü–ö"
            )
        else:
            await message.answer(
                f"üìã –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö: {mode_status}\n"
                f"–°–ø–∏—Å–æ–∫ –ü–ö –ø—É—Å—Ç\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/pc <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –ü–ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /pc 20)\n"
                "/pc 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö\n"
                "/pc clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ü–ö"
            )
        return

    arg = args[0].lower()

    if arg == "clear":
        clear_all_pcs()
        await message.answer("‚úÖ –í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ü–ö –æ—á–∏—â–µ–Ω")
    elif arg == "0":
        pc_mode_enabled = False
        await message.answer("‚úÖ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ü–ö")
    else:
        try:
            count = int(arg)
            if count < 0:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                return
            elif count == 0:
                pc_mode_enabled = False
                await message.answer("‚úÖ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –ü–ö")
                return

            pc_mode_enabled = True
            add_pcs(count)
            available_pcs = get_available_pcs()
            pcs_text = ", ".join(map(str, available_pcs))
            await message.answer(f"‚úÖ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –ü–ö –≤–∫–ª—é—á–µ–Ω\n–î–æ–±–∞–≤–ª–µ–Ω–æ –ü–ö –¥–æ –Ω–æ–º–µ—Ä–∞ {count}\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ü–ö: {pcs_text}")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pc <—á–∏—Å–ª–æ>, /pc 0 –∏–ª–∏ /pc clear")

@router.message(Command("gadd"))
async def add_sos_word(message: Message):
    if not await is_admin(message.chat.id, message.from_user.id, message.bot):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gadd —Å–ª–æ–≤–æ")
        return

    word = args[0].lower()
    if word in sos_words:
        await message.answer(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
        return

    sos_words.add(word)
    await message.answer(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤")

@router.message(Command("gdel"))
async def delete_sos_word(message: Message):
    if not await is_admin(message.chat.id, message.from_user.id, message.bot):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gdel —Å–ª–æ–≤–æ")
        return

    word = args[0].lower()
    if word not in sos_words:
        await message.answer(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
        return

    sos_words.remove(word)
    await message.answer(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ SOS-—Å–ª–æ–≤")

@router.message(Command("gall"))
async def list_sos_words(message: Message):
    if not await is_admin(message.chat.id, message.from_user.id, message.bot):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not sos_words:
        await message.answer("–°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤ –ø—É—Å—Ç")
        return

    words_list = "\n".join(sorted(sos_words))
    await message.answer(f"–°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤:\n{words_list}")

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = message.from_user.id

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logging.info(f"admin_command: user_id={user_id}, ADMIN_ID={ADMIN_ID}")

    # –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if ADMIN_ID == 0:
        await message.answer("‚ùå ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID")
        return

    if user_id != ADMIN_ID:
        await message.answer(f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {ADMIN_ID})")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        if admin_list:
            admin_text = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in sorted(admin_list)])
            await message.answer(
                f"üìã –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{admin_text}\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/admin add <user_id|@username> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/admin del <user_id> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/admin list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"
            )
        else:
            await message.answer(
                "üìã –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/admin add <user_id|@username> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/admin del <user_id> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/admin list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"
            )
        return

    action = args[0].lower()

    if action == "list":
        if admin_list:
            admin_text = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in sorted(admin_list)])
            await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{admin_text}")
        else:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç")

    elif action == "add":
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ @username: /admin add <user_id>")
            return

        user_input = args[1]
        new_admin_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username)
        if user_input.startswith('@'):
            username = user_input[1:]  # –£–±–∏—Ä–∞–µ–º @
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                chat_id = message.chat.id

                # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
                chat_admins = await message.bot.get_chat_administrators(chat_id)
                for admin in chat_admins:
                    if admin.user.username and admin.user.username.lower() == username.lower():
                        new_admin_id = admin.user.id
                        break

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤, –ø—Ä–æ–±—É–µ–º —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if not new_admin_id:
                    try:
                        chat_member = await message.bot.get_chat_member(chat_id, f"@{username}")
                        if chat_member and chat_member.user:
                            new_admin_id = chat_member.user.id
                    except Exception:
                        pass

                if not new_admin_id:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
                    return

            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {str(e)}")
                return
        else:
            # –≠—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                new_admin_id = int(user_input)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id –∏–ª–∏ @username")
                return

        if new_admin_id == ADMIN_ID:
            await message.answer("‚ùå –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return

        if new_admin_id in admin_list:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return

        admin_list.add(new_admin_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try:
            user_info = await message.bot.get_chat_member(message.chat.id, new_admin_id)
            user_display = f"@{user_info.user.username}" if user_info.user.username else f"ID:{new_admin_id}"
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        except Exception:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")

    elif action == "del":
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ user_id: /admin del <user_id>")
            return

        try:
            admin_to_remove = int(args[1])
            if admin_to_remove == ADMIN_ID:
                await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            if admin_to_remove not in admin_list:
                await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                return

            admin_list.remove(admin_to_remove)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

    else:
        await message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/admin add <user_id|@username> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
            "/admin del <user_id> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
            "/admin list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"
        )

# Message handler for general messages
@router.message()
async def handle_message(message: Message):
    if not message.text:
        return

    chat_id = message.chat.id
    message_thread_id = message.message_thread_id
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–ø–∏–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å message_thread_id)
    if message_thread_id:
        if (chat_id in restricted_topics and 
            message_thread_id in restricted_topics[chat_id]):

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            is_user_admin = await is_admin(chat_id, user_id, message.bot)

            if not is_user_admin:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
                allowed_users = restricted_topics[chat_id][message_thread_id]
                user_allowed = False

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (—Å @ –∏ –±–µ–∑)
                if username:
                    user_allowed = (f"@{username}" in allowed_users or 
                                  username in allowed_users)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ @123456789)
                if not user_allowed:
                    user_id_mention = f"@{user_id}"
                    user_allowed = user_id_mention in allowed_users

                if not user_allowed:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ
                    try:
                        await message.bot.delete_message(
                            chat_id=chat_id,
                            message_id=message.message_id
                        )
                        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ: {chat_id}/{message_thread_id}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ: {str(e)}")
                    return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ç–µ–º–µ –ª–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (chat_id in rename_topics_dict and 
        message_thread_id in rename_topics_dict[chat_id]):
        # –£–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–∞—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –∫—Ä–æ–º–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        is_reply_to_name_request = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –æ—Ç –±–æ—Ç–∞)
        if (not message.from_user.is_bot and 
            message.reply_to_message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
            reply_text = message.reply_to_message.text
            if (message.reply_to_message.from_user.is_bot and
                reply_text and "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ" in reply_text):
                is_reply_to_name_request = True

        if not is_reply_to_name_request:
            try:
                await message.bot.delete_message(
                    chat_id=chat_id,
                    message_id=message.message_id
                )
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {chat_id}/{message_thread_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {str(e)}")
            return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SOS —Å–ª–æ–≤–∞
    await check_sos_word(message)

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if message.text.lower() == "–Ω–æ–º–µ—Ä":
        if chat_id in workers_dict and message_thread_id in workers_dict[chat_id]:
            workers = workers_dict[chat_id][message_thread_id]
            user_mentions = " ".join(workers)
            await message.answer(f"–í–Ω–∏–º–∞–Ω–∏–µ! {user_mentions}")

async def check_sos_word(message: Message):
    if not message.text:
        return

    chat_id = message.chat.id
    message_thread_id = message.message_thread_id
    message_text = message.text.lower()

    logging.info(f"check_sos_word –≤—ã–∑–≤–∞–Ω. Chat ID: {chat_id}, Topic ID: {message_thread_id}, –¢–µ–∫—Å—Ç: {message_text}")

    if not message_thread_id:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–µ–º–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SOS-—Å–ª–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ SOS-—Å–ª–æ–≤–æ
    sos_found = False
    for word in sos_words:
        if word in message_text:
            sos_found = True
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ SOS-—Å–ª–æ–≤–æ: {word}")
            break

    if sos_found:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ SOS –≤ —ç—Ç–æ–π —Ç–µ–º–µ
            if (chat_id in active_topics and 
                message_thread_id in active_topics[chat_id]):
                # SOS —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
                task_key = (chat_id, message_thread_id)
                if task_key in sos_removal_tasks:
                    sos_removal_tasks[task_key].cancel()
                    del sos_removal_tasks[task_key]
            else:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                await create_active_topics_thread(chat_id, message.bot)

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
                if chat_id not in active_topics:
                    active_topics[chat_id] = set()
                active_topics[chat_id].add(message_thread_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ SOS
            sos_activation_times[(chat_id, message_thread_id)] = time.time()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω—è—Ç–∏—è SOS —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            task_key = (chat_id, message_thread_id)
            sos_removal_tasks[task_key] = asyncio.create_task(
                auto_remove_sos(chat_id, message_thread_id, message.bot)
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            if chat_id not in sos_update_tasks:
                sos_update_tasks[chat_id] = asyncio.create_task(
                    update_sos_times(chat_id, message.bot)
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã"
            await update_active_topics_message(chat_id, message.bot)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã
            if chat_id in workers_dict and message_thread_id in workers_dict[chat_id]:
                workers = workers_dict[chat_id][message_thread_id]
                topic_name = topics_dict.get(chat_id, {}).get(message_thread_id, f"–¢–µ–º–∞ {message_thread_id}")

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–ø–∏–∫
                try:
                    chat = await message.bot.get_chat(chat_id)
                    if chat.username:
                        link = f"https://t.me/{chat.username}/{message_thread_id}"
                    else:
                        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                        link = f"https://t.me/c/{str(chat_id)[4:]}/{message_thread_id}"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    for worker in workers:
                        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
                        username = worker.replace('@', '') if worker.startswith('@') else worker

                        try:
                            notification_text = (
                                f"üö® –í–ù–ò–ú–ê–ù–ò–ï! –ù—É–∂–µ–Ω –Ω–æ–º–µ—Ä –≤ —Ç–µ–º–µ '{topic_name}'\n"
                                f"–°—Å—ã–ª–∫–∞: {link}"
                            )

                            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ user_id –ø–æ username
                                chat_members = await message.bot.get_chat_administrators(chat_id)
                                user_id = None

                                # –ò—â–µ–º user_id –ø–æ username —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                                for member in chat_members:
                                    if member.user.username and member.user.username.lower() == username.lower():
                                        user_id = member.user.id
                                        break

                                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤, –ø—Ä–æ–±—É–µ–º —Å—Ä–µ–¥–∏ –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                if not user_id:
                                    try:
                                        chat_member = await message.bot.get_chat_member(chat_id, f"@{username}")
                                        if chat_member:
                                            user_id = chat_member.user.id
                                    except:
                                        pass

                                if user_id:
                                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°
                                    await message.bot.send_message(
                                        chat_id=user_id,
                                        text=notification_text,
                                        disable_web_page_preview=True
                                    )
                                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –õ–° –≤–æ—Ä–∫–µ—Ä—É {worker} (ID: {user_id})")
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ user_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                                    await message.bot.send_message(
                                        chat_id=chat_id,
                                        message_thread_id=message_thread_id,
                                        text=f"üö® –í–ù–ò–ú–ê–ù–ò–ï! {worker} - –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä!",
                                        disable_web_page_preview=True
                                    )
                                    logging.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –¥–ª—è {worker}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")

                            except Exception as dm_error:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º)
                                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –≤–æ—Ä–∫–µ—Ä—É {worker}: {str(dm_error)}")
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ fallback
                                await message.bot.send_message(
                                    chat_id=chat_id,
                                    message_thread_id=message_thread_id,
                                    text=f"üö® –í–ù–ò–ú–ê–ù–ò–ï! {worker} - –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä!",
                                    disable_web_page_preview=True
                                )
                                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ fallback –¥–ª—è {worker}")

                        except Exception as e:
                            logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä—É {worker}: {str(e)}")

                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º –¥–ª—è —Ç–µ–º—ã {message_thread_id}")

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ—Ä–∫–µ—Ä–∞–º: {str(e)}")

        except Exception as e:
            logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_sos_word: {str(e)}")
