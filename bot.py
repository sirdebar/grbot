import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from telegram.error import RetryAfter
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

WAITING_FOR_TOPIC_NAME = 1
WAITING_FOR_TOPIC_ID = 2
WAITING_FOR_BROADCAST = 3
WAITING_FOR_RENAME_COUNT = 4
WAITING_FOR_RENAME = 5

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º
topics_dict = {}
workers_dict = {}
rename_topics_dict = {}
# –°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤
sos_words = set()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ —á–∞—Ç–æ–≤
original_avatars = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data='list_topics')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É", callback_data='create_topic')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data='delete_topic')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã", callback_data='delete_all_topics')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='create_broadcast')],
        [InlineKeyboardButton("üñå –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", callback_data='create_rename_topics')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã")
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'list_topics':
        await list_topics(update, context)
    elif query.data == 'create_topic':
        await request_topic_name(update, context)
    elif query.data == 'delete_topic':
        await request_topic_id(update, context)
    elif query.data == 'delete_all_topics':
        await delete_all_topics(update, context)
    elif query.data == 'create_broadcast':
        await request_broadcast_message(update, context)
    elif query.data == 'create_rename_topics':
        await request_rename_topics_count(update, context)
    elif query.data.startswith('confirm_rename_'):
        topic_id = int(query.data.split('_')[2])
        chat = await context.bot.get_chat(query.message.chat_id)
        
        if chat.id not in rename_topics_dict or topic_id not in rename_topics_dict[chat.id]:
            await query.message.reply_text("–≠—Ç–∞ —Ç–µ–º–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return

        context.user_data['current_rename_topic'] = {
            'chat_id': chat.id,
            'topic_id': topic_id,
            'old_name': topics_dict[chat.id][topic_id]
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['confirmation_message_id'] = query.message.message_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        message = await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        context.user_data['request_name_message_id'] = message.message_id
        
        return WAITING_FOR_RENAME

async def check_forum_support(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat = await context.bot.get_chat(chat_id)
        return chat.is_forum
    except Exception:
        return False

async def request_topic_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)
    
    if chat.type in ['group', 'supergroup']:
        if await check_forum_support(chat.id, context):
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã:"
            )
            return WAITING_FOR_TOPIC_NAME
        else:
            await query.message.reply_text(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return ConversationHandler.END
    else:
        await query.message.reply_text(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
        )
        return ConversationHandler.END

async def worker_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /worker –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–µ–º—ã @user1 @user2 ...")
        return

    topic_name = context.args[0]
    users = context.args[1:]
    
    if not users:
        await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    chat = await context.bot.get_chat(update.message.chat_id)
    
    if not await check_forum_support(chat.id, context):
        await update.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    topic_id = None
    for tid, name in topics_dict.get(chat.id, {}).items():
        if name == topic_name:
            topic_id = tid
            break

    if not topic_id:
        await update.message.reply_text(f"–¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    user_mentions = " ".join(users)
    await context.bot.send_message(
        chat_id=chat.id,
        message_thread_id=topic_id,
        text=f"–í–Ω–∏–º–∞–Ω–∏–µ! {user_mentions}"
    )

    if chat.id not in workers_dict:
        workers_dict[chat.id] = {}
    workers_dict[chat.id][topic_id] = users

async def create_topic_with_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat = await context.bot.get_chat(update.message.chat_id)
    
    if not await check_forum_support(chat.id, context):
        await update.message.reply_text(
            "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º"
        )
        return ConversationHandler.END
    
    try:
        if text.isdigit():
            count = int(text)
            for i in range(1, count + 1):
                topic_name = f"–ü–ö{i}"
                await create_single_topic(chat.id, topic_name, context)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {count} —Ç–µ–º")
        else:
            topics = [t.strip() for t in text.split('\n') if t.strip()]
            for topic_name in topics:
                await create_single_topic(chat.id, topic_name, context)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {len(topics)} —Ç–µ–º")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")
    
    return ConversationHandler.END

async def create_single_topic(chat_id: int, topic_name: str, context: ContextTypes.DEFAULT_TYPE):
    topic = await context.bot.create_forum_topic(
        chat_id=chat_id,
        name=topic_name
    )
    
    if chat_id not in topics_dict:
        topics_dict[chat_id] = {}
    topics_dict[chat_id][topic.message_thread_id] = topic_name

async def request_topic_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)
    
    if chat.type in ['group', 'supergroup']:
        if await check_forum_support(chat.id, context):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –∏—Ö ID
            if chat.id in topics_dict and topics_dict[chat.id]:
                topics_list = "\n".join([
                    f"- {name} (ID: {topic_id})"
                    for topic_id, name in topics_dict[chat.id].items()
                ])
                await query.message.reply_text(
                    f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º:\n{topics_list}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
                )
            else:
                await query.message.reply_text(
                    "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º. "
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'."
                )
                return ConversationHandler.END
            return WAITING_FOR_TOPIC_ID
        else:
            await query.message.reply_text(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º."
            )
            return ConversationHandler.END
    else:
        await query.message.reply_text(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
        )
        return ConversationHandler.END

async def delete_topic_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic_id = update.message.text
    chat = await context.bot.get_chat(update.message.chat_id)
    
    try:
        topic_id = int(topic_id)
        if chat.id in topics_dict and topic_id in topics_dict[chat.id]:
            topic_name = topics_dict[chat.id][topic_id]
            await context.bot.delete_forum_topic(
                chat_id=chat.id,
                message_thread_id=topic_id
            )
            del topics_dict[chat.id][topic_id]
            await update.message.reply_text(
                f"–¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
            )
        else:
            await update.message.reply_text(
                "–¢–µ–º–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–°–ø–∏—Å–æ–∫ —Ç–µ–º' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º."
            )
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ–º—ã (—á–∏—Å–ª–æ)."
        )
    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}"
        )
    
    return ConversationHandler.END

async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        chat = await context.bot.get_chat(query.message.chat_id)
        
        if chat.type not in ['group', 'supergroup']:
            await query.message.reply_text(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
            )
            return

        if not chat.is_forum:
            await query.message.reply_text(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º."
            )
            return

        if chat.id in topics_dict and topics_dict[chat.id]:
            topics_list = "\n".join([
                f"- {name} (ID: {topic_id})"
                for topic_id, name in topics_dict[chat.id].items()
            ])
            await query.message.reply_text(
                f"–°–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –≥—Ä—É–ø–ø–µ {chat.title}:\n{topics_list}"
            )
        else:
            await query.message.reply_text(
                "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º. "
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'."
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏: {str(e)}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    if update.message.text.lower() == "–Ω–æ–º–µ—Ä":
        chat_id = update.message.chat_id
        message_thread_id = update.message.message_thread_id

        if chat_id in workers_dict and message_thread_id in workers_dict[chat_id]:
            workers = workers_dict[chat_id][message_thread_id]
            user_mentions = " ".join(workers)
            await update.message.reply_text(f"–í–Ω–∏–º–∞–Ω–∏–µ! {user_mentions}")

async def delete_all_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)
    
    if chat.type not in ['group', 'supergroup']:
        await query.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, context):
        await query.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await query.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    deleted_count = 0
    for topic_id in list(topics_dict[chat.id].keys()):
        try:
            await context.bot.delete_forum_topic(
                chat_id=chat.id,
                message_thread_id=topic_id
            )
            deleted_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã {topic_id}: {str(e)}")

    topics_dict[chat.id] = {}
    if chat.id in workers_dict:
        workers_dict[chat.id] = {}

    await query.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ–º")

async def request_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)
    
    if chat.type not in ['group', 'supergroup']:
        await query.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, context):
        await query.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await query.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —Ç–µ–º—ã:")
    return WAITING_FOR_BROADCAST

async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    chat = await context.bot.get_chat(update.message.chat_id)
    
    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await update.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return ConversationHandler.END

    sent_count = 0
    for topic_id in topics_dict[chat.id].keys():
        try:
            await context.bot.send_message(
                chat_id=chat.id,
                message_thread_id=topic_id,
                text=message_text
            )
            sent_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É {topic_id}: {str(e)}")

    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count} —Ç–µ–º")
    return ConversationHandler.END

async def request_rename_topics_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)
    
    if chat.type not in ['group', 'supergroup']:
        await query.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, context):
        await query.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    return WAITING_FOR_RENAME_COUNT

async def create_rename_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        chat = await context.bot.get_chat(update.message.chat_id)
        
        if chat.id not in rename_topics_dict:
            rename_topics_dict[chat.id] = set()

        created_count = 0
        for i in range(1, count + 1):
            try:
                topic = await context.bot.create_forum_topic(
                    chat_id=chat.id,
                    name=f"{i}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                )
                
                if chat.id not in topics_dict:
                    topics_dict[chat.id] = {}
                topics_dict[chat.id][topic.message_thread_id] = f"{i}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                
                rename_topics_dict[chat.id].add(topic.message_thread_id)
                
                keyboard = [[InlineKeyboardButton("‚úÖ", callback_data=f'confirm_rename_{topic.message_thread_id}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                try:
                    await context.bot.send_message(
                        chat_id=chat.id,
                        message_thread_id=topic.message_thread_id,
                        text="–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                             "–ü–µ—Ä–µ–¥ —ç—Ç–∏–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –Ω–∏–∂–µ.",
                        reply_markup=reply_markup
                    )
                except RetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    await context.bot.send_message(
                        chat_id=chat.id,
                        message_thread_id=topic.message_thread_id,
                        text="–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                             "–ü–µ—Ä–µ–¥ —ç—Ç–∏–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –Ω–∏–∂–µ.",
                        reply_markup=reply_markup
                    )
                
                created_count += 1
                
                if i < count:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–º—ã
                    await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 5 —Å–µ–∫—É–Ω–¥
                    
            except RetryAfter as e:
                await asyncio.sleep(e.retry_after)
                continue
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã {i}: {str(e)}")

        try:
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
        except RetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        try:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")
        except RetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")
    
    return ConversationHandler.END

async def rename_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    topic_data = context.user_data.get('current_rename_topic')
    
    if not topic_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–µ")
        return ConversationHandler.END

    chat_id = topic_data['chat_id']
    topic_id = topic_data['topic_id']
    old_name = topic_data['old_name']
    number = old_name.split(":")[0]
    
    try:
        await context.bot.edit_forum_topic(
            chat_id=chat_id,
            message_thread_id=topic_id,
            name=f"{number}:{new_name}"
        )
        
        topics_dict[chat_id][topic_id] = f"{number}:{new_name}"
        if chat_id in rename_topics_dict:
            rename_topics_dict[chat_id].discard(topic_id)
        
        await update.message.reply_text(f"–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {number}:{new_name}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if 'confirmation_message_id' in context.user_data:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=context.user_data['confirmation_message_id']
                )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
            if 'request_name_message_id' in context.user_data:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=context.user_data['request_name_message_id']
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}")
    
    context.user_data.pop('current_rename_topic', None)
    context.user_data.pop('confirmation_message_id', None)
    context.user_data.pop('request_name_message_id', None)
    return ConversationHandler.END

async def is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['creator', 'administrator']
    except Exception:
        return False

async def add_sos_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gadd —Å–ª–æ–≤–æ")
        return

    word = context.args[0].lower()
    if word in sos_words:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
        return

    sos_words.add(word)
    await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤")

async def delete_sos_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gdel —Å–ª–æ–≤–æ")
        return

    word = context.args[0].lower()
    if word not in sos_words:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
        return

    sos_words.remove(word)
    await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ SOS-—Å–ª–æ–≤")

async def list_sos_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not sos_words:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤ –ø—É—Å—Ç")
        return

    words_list = "\n".join(sorted(sos_words))
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤:\n{words_list}")

async def check_sos_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    chat_id = update.message.chat_id
    message_text = update.message.text.lower()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ SOS-—Å–ª–æ–≤–æ
    for word in sos_words:
        if word in message_text:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ SOS-—Å–ª–æ–≤–æ: {word}")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–µ–º—ã –≤ —á–∞—Ç–µ
                if chat_id in topics_dict:
                    for topic_id in topics_dict[chat_id].keys():
                        try:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É —Ç–µ–º—ã, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                            if (chat_id, topic_id) not in original_avatars:
                                try:
                                    topic = await context.bot.get_forum_topic(chat_id=chat_id, message_thread_id=topic_id)
                                    if topic and topic.icon_custom_emoji_id:
                                        original_avatars[(chat_id, topic_id)] = topic.icon_custom_emoji_id
                                except Exception as e:
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ {topic_id}: {str(e)}")

                            # –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–µ–º—ã –Ω–∞ SOS
                            await context.bot.edit_forum_topic(
                                chat_id=chat_id,
                                message_thread_id=topic_id,
                                icon_custom_emoji_id="üÜò"
                            )
                            logging.info(f"–ò–∫–æ–Ω–∫–∞ —Ç–µ–º—ã {topic_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ SOS")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã {topic_id}: {str(e)}")
                            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                            try:
                                await context.bot.edit_forum_topic(
                                    chat_id=chat_id,
                                    message_thread_id=topic_id,
                                    name=topics_dict[chat_id][topic_id],
                                    icon_custom_emoji_id="üÜò"
                                )
                                logging.info(f"–ò–∫–æ–Ω–∫–∞ —Ç–µ–º—ã {topic_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
                            except Exception as e2:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã {topic_id}: {str(e2)}")
            except Exception as e:
                logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SOS-—Å–ª–æ–≤–∞: {str(e)}")

async def restore_topic_icon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    message_thread_id = update.message.message_thread_id
    
    if (chat_id, message_thread_id) in original_avatars:
        try:
            await context.bot.edit_forum_topic(
                chat_id=chat_id,
                message_thread_id=message_thread_id,
                icon_custom_emoji_id=original_avatars[(chat_id, message_thread_id)]
            )
            del original_avatars[(chat_id, message_thread_id)]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã: {str(e)}")

async def test_sos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gtest —Å–ª–æ–≤–æ")
        return

    word = context.args[0].lower()
    if word not in sos_words:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ SOS-—Å–ª–æ–≤")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = type('TestMessage', (), {
        'chat_id': update.message.chat_id,
        'text': word,
        'message_thread_id': update.message.message_thread_id
    })
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π update
    test_update = type('TestUpdate', (), {'message': test_message})
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    await check_sos_word(test_update, context)
    await update.message.reply_text("–¢–µ—Å—Ç SOS-—Å–ª–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(request_topic_name, pattern='^create_topic$'),
            CallbackQueryHandler(request_topic_id, pattern='^delete_topic$'),
            CallbackQueryHandler(request_broadcast_message, pattern='^create_broadcast$'),
            CallbackQueryHandler(request_rename_topics_count, pattern='^create_rename_topics$'),
            CallbackQueryHandler(button_handler, pattern='^confirm_rename_')
        ],
        states={
            WAITING_FOR_TOPIC_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_topic_with_name)],
            WAITING_FOR_TOPIC_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_topic_by_id)],
            WAITING_FOR_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_broadcast)],
            WAITING_FOR_RENAME_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_rename_topics)],
            WAITING_FOR_RENAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, rename_topic)]
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("worker", worker_command))
    application.add_handler(CommandHandler("gadd", add_sos_word))
    application.add_handler(CommandHandler("gdel", delete_sos_word))
    application.add_handler(CommandHandler("gall", list_sos_words))
    application.add_handler(CommandHandler("grestore", restore_topic_icon))
    application.add_handler(CommandHandler("gtest", test_sos))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_sos_word))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 