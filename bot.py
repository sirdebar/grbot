import os
import logging
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from telegram.error import RetryAfter
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))
GAMES_ENABLED = os.getenv('GAMES_ENABLED', 'true').lower() == 'true'

# –í–∞—Ä–∏–∞–Ω—Ç—ã ID —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ SOS (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ)
# –≠—Ç–∏ ID –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è custom emoji –≤ —Ç–µ–º–∞—Ö —Ñ–æ—Ä—É–º–∞
SOS_EMOJI_OPTIONS = [
    "5789953862016985048",  # –ö—Ä–∞—Å–Ω—ã–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
    "5787544344906959608",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫  
    "5780043138200730399",  # –ñ—ë–ª—Ç—ã–π –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫
    "5789678423060137046",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
]

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

WAITING_FOR_TOPIC_NAME = 1
WAITING_FOR_TOPIC_ID = 2
WAITING_FOR_BROADCAST = 3
WAITING_FOR_RENAME_COUNT = 4
WAITING_FOR_RENAME = 5
PLAYING_GUESS_NUMBER = 6
PLAYING_DICE = 7

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º
topics_dict = {}
workers_dict = {}
rename_topics_dict = {}
# –°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤
sos_words = {"—Å–æ—Å", "sos", "–ø–æ–º–æ–≥–∏—Ç–µ", "–ø–æ–º–æ—â—å", "–Ω–æ–º–µ—Ä"}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫ —á–∞—Ç–æ–≤
original_avatars = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º (—Ç–µ–º —Å SOS)
active_topics = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–æ–ø–∏–∫–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã" –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º
active_topics_info = {}
# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∏–≥—Ä
game_sessions = {}
guess_numbers = {}
tic_tac_toe_games = {}
blackjack_games = {}
battleship_games = {}

async def create_active_topics_thread(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ø–∏–∫ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–ø–∏–∫
        if chat_id in active_topics_info:
            return active_topics_info[chat_id]['topic_id']

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫
        topic = await context.bot.create_forum_topic(
            chat_id=chat_id,
            name="–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã"
        )

        topic_id = topic.message_thread_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.send_message(
            chat_id=chat_id,
            message_thread_id=topic_id,
            text="–¢–µ–º—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä:\n(–ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º)"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        active_topics_info[chat_id] = {
            'topic_id': topic_id,
            'message_id': message.message_id
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å —Ç–µ–º
        if chat_id not in topics_dict:
            topics_dict[chat_id] = {}
        topics_dict[chat_id][topic_id] = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã"

        logging.info(f"–°–æ–∑–¥–∞–Ω —Ç–æ–ø–∏–∫ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã' —Å ID {topic_id}")
        return topic_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–ø–∏–∫–∞ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã': {str(e)}")
        return None

async def update_active_topics_message(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–ø–∏–∫ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã"
        if chat_id not in active_topics_info:
            await create_active_topics_thread(chat_id, context)

        if chat_id not in active_topics_info:
            return

        topic_id = active_topics_info[chat_id]['topic_id']
        message_id = active_topics_info[chat_id]['message_id']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if chat_id in active_topics and active_topics[chat_id]:
            text = "–¢–µ–º—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä:\n"
            chat = await context.bot.get_chat(chat_id)

            for active_topic_id in active_topics[chat_id]:
                topic_name = topics_dict.get(chat_id, {}).get(active_topic_id, f"–¢–µ–º–∞ {active_topic_id}")
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–ø–∏–∫
                if chat.username:
                    link = f"https://t.me/{chat.username}/{active_topic_id}"
                else:
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                    link = f"https://t.me/c/{str(chat_id)[4:]}/{active_topic_id}"

                text += f"‚Ä¢ {topic_name} - {link}\n"
        else:
            text = "–¢–µ–º—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä:\n(–ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º)"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            disable_web_page_preview=True
        )

        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã' –¥–ª—è —á–∞—Ç–∞ {chat_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã': {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data='list_topics')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É", callback_data='create_topic')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É", callback_data='delete_topic')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ–º—ã", callback_data='delete_all_topics')],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='create_broadcast')],
        [InlineKeyboardButton("üñå –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º", callback_data='create_rename_topics')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã")
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'list_topics':
        await list_topics(update, context)
    elif query.data == 'create_topic':
        await request_topic_name(update, context)
    elif query.data == 'delete_topic':
        await request_topic_id(update, context)
    elif query.data == 'delete_all_topics':
        await delete_all_topics(update, context)
    elif query.data == 'create_broadcast':
        await request_broadcast_message(update, context)
    elif query.data == 'create_rename_topics':
        await request_rename_topics_count(update, context)
    elif query.data.startswith('confirm_rename_'):
        topic_id = int(query.data.split('_')[2])
        chat = await context.bot.get_chat(query.message.chat_id)

        if chat.id not in rename_topics_dict or topic_id not in rename_topics_dict[chat.id]:
            await query.message.reply_text("–≠—Ç–∞ —Ç–µ–º–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return

        context.user_data['current_rename_topic'] = {
            'chat_id': chat.id,
            'topic_id': topic_id,
            'old_name': topics_dict[chat.id][topic_id]
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['confirmation_message_id'] = query.message.message_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        message = await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        context.user_data['request_name_message_id'] = message.message_id

        return WAITING_FOR_RENAME

async def check_forum_support(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat = await context.bot.get_chat(chat_id)
        return chat.is_forum
    except Exception:
        return False

async def request_topic_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)

    if chat.type in ['group', 'supergroup']:
        if await check_forum_support(chat.id, context):
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã:"
            )
            return WAITING_FOR_TOPIC_NAME
        else:
            await query.message.reply_text(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return ConversationHandler.END
    else:
        await query.message.reply_text(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
        )
        return ConversationHandler.END

async def worker_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /worker –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç–µ–º—ã @user1 @user2 ...")
        return

    topic_name = context.args[0]
    users = context.args[1:]

    if not users:
        await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    chat = await context.bot.get_chat(update.message.chat_id)

    if not await check_forum_support(chat.id, context):
        await update.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    topic_id = None
    for tid, name in topics_dict.get(chat.id, {}).items():
        if name == topic_name:
            topic_id = tid
            break

    if not topic_id:
        await update.message.reply_text(f"–¢–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    user_mentions = " ".join(users)
    await context.bot.send_message(
        chat_id=chat.id,
        message_thread_id=topic_id,
        text=f"–í–Ω–∏–º–∞–Ω–∏–µ! {user_mentions}"
    )

    if chat.id not in workers_dict:
        workers_dict[chat.id] = {}
    workers_dict[chat.id][topic_id] = users

async def create_topic_with_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat = await context.bot.get_chat(update.message.chat_id)

    if not await check_forum_support(chat.id, context):
        await update.message.reply_text(
            "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º"
        )
        return ConversationHandler.END

    try:
        if text.isdigit():
            count = int(text)
            for i in range(1, count + 1):
                topic_name = f"–ü–ö{i}"
                await create_single_topic(chat.id, topic_name, context)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {count} —Ç–µ–º")
        else:
            topics = [t.strip() for t in text.split('\n') if t.strip()]
            for topic_name in topics:
                await create_single_topic(chat.id, topic_name, context)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {len(topics)} —Ç–µ–º")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")

    return ConversationHandler.END

async def create_single_topic(chat_id: int, topic_name: str, context: ContextTypes.DEFAULT_TYPE):
    topic = await context.bot.create_forum_topic(
        chat_id=chat_id,
        name=topic_name
    )

    if chat_id not in topics_dict:
        topics_dict[chat_id] = {}
    topics_dict[chat_id][topic.message_thread_id] = topic_name

async def request_topic_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)

    if chat.type in ['group', 'supergroup']:
        if await check_forum_support(chat.id, context):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –∏—Ö ID
            if chat.id in topics_dict and topics_dict[chat.id]:
                topics_list = "\n".join([
                    f"- {name} (ID: {topic_id})"
                    for topic_id, name in topics_dict[chat.id].items()
                ])
                await query.message.reply_text(
                    f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º:\n{topics_list}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"
                )
            else:
                await query.message.reply_text(
                    "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º. "
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'."
                )
                return ConversationHandler.END
            return WAITING_FOR_TOPIC_ID
        else:
            await query.message.reply_text(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º."
            )
            return ConversationHandler.END
    else:
        await query.message.reply_text(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
        )
        return ConversationHandler.END

async def delete_topic_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic_id = update.message.text
    chat = await context.bot.get_chat(update.message.chat_id)

    try:
        topic_id = int(topic_id)
        if chat.id in topics_dict and topic_id in topics_dict[chat.id]:
            topic_name = topics_dict[chat.id][topic_id]
            await context.bot.delete_forum_topic(
                chat_id=chat.id,
                message_thread_id=topic_id
            )
            del topics_dict[chat.id][topic_id]
            await update.message.reply_text(
                f"–¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
            )
        else:
            await update.message.reply_text(
                "–¢–µ–º–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–°–ø–∏—Å–æ–∫ —Ç–µ–º' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º."
            )
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ–º—ã (—á–∏—Å–ª–æ)."
        )
    except Exception as e:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}"
        )

    return ConversationHandler.END

async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        chat = await context.bot.get_chat(query.message.chat_id)

        if chat.type not in ['group', 'supergroup']:
            await query.message.reply_text(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö."
            )
            return

        if not chat.is_forum:
            await query.message.reply_text(
                "–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º. "
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–º –≥—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–∞–∫ —Ñ–æ—Ä—É–º."
            )
            return

        if chat.id in topics_dict and topics_dict[chat.id]:
            topics_list = "\n".join([
                f"- {name} (ID: {topic_id})"
                for topic_id, name in topics_dict[chat.id].items()
            ])
            await query.message.reply_text(
                f"–°–ø–∏—Å–æ–∫ —Ç–µ–º –≤ –≥—Ä—É–ø–ø–µ {chat.title}:\n{topics_list}"
            )
        else:
            await query.message.reply_text(
                "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–º. "
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É'."
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏: {str(e)}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä—É–ø–ø–∞–º–∏. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º SOS —Å–ª–æ–≤–∞
    await check_sos_word(update, context)

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if update.message.text.lower() == "–Ω–æ–º–µ—Ä":
        chat_id = update.message.chat_id
        message_thread_id = update.message.message_thread_id

        if chat_id in workers_dict and message_thread_id in workers_dict[chat_id]:
            workers = workers_dict[chat_id][message_thread_id]
            user_mentions = " ".join(workers)
            await update.message.reply_text(f"–í–Ω–∏–º–∞–Ω–∏–µ! {user_mentions}")

async def delete_all_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)

    if chat.type not in ['group', 'supergroup']:
        await query.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, context):
        await query.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await query.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    deleted_count = 0
    for topic_id in list(topics_dict[chat.id].keys()):
        try:
            await context.bot.delete_forum_topic(
                chat_id=chat.id,
                message_thread_id=topic_id
            )
            deleted_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã {topic_id}: {str(e)}")

    topics_dict[chat.id] = {}
    if chat.id in workers_dict:
        workers_dict[chat.id] = {}

    await query.message.reply_text(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ–º")

async def request_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)

    if chat.type not in ['group', 'supergroup']:
        await query.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, context):
        await query.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await query.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–æ –≤—Å–µ —Ç–µ–º—ã:")
    return WAITING_FOR_BROADCAST

async def send_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    chat = await context.bot.get_chat(update.message.chat_id)

    if chat.id not in topics_dict or not topics_dict[chat.id]:
        await update.message.reply_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Ç–µ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return ConversationHandler.END

    sent_count = 0
    for topic_id in topics_dict[chat.id].keys():
        try:
            await context.bot.send_message(
                chat_id=chat.id,
                message_thread_id=topic_id,
                text=message_text
            )
            sent_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º—É {topic_id}: {str(e)}")

    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {sent_count} —Ç–µ–º")
    return ConversationHandler.END

async def request_rename_topics_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = await context.bot.get_chat(query.message.chat_id)

    if chat.type not in ['group', 'supergroup']:
        await query.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await check_forum_support(chat.id, context):
        await query.message.reply_text("–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—ã")
        return

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    return WAITING_FOR_RENAME_COUNT

async def create_rename_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
        chat = await context.bot.get_chat(update.message.chat_id)

        if chat.id not in rename_topics_dict:
            rename_topics_dict[chat.id] = set()

        created_count = 0
        for i in range(1, count + 1):
            try:
                topic = await context.bot.create_forum_topic(
                    chat_id=chat.id,
                    name=f"{i}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                )

                if chat.id not in topics_dict:
                    topics_dict[chat.id] = {}
                topics_dict[chat.id][topic.message_thread_id] = f"{i}:–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                rename_topics_dict[chat.id].add(topic.message_thread_id)

                keyboard = [[InlineKeyboardButton("‚úÖ", callback_data=f'confirm_rename_{topic.message_thread_id}')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                try:
                    await context.bot.send_message(
                        chat_id=chat.id,
                        message_thread_id=topic.message_thread_id,
                        text="–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                             "–ü–µ—Ä–µ–¥ —ç—Ç–∏–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –Ω–∏–∂–µ.",
                        reply_markup=reply_markup
                    )
                except RetryAfter as e:
                    await asyncio.sleep(e.retry_after)
                    await context.bot.send_message(
                        chat_id=chat.id,
                        message_thread_id=topic.message_thread_id,
                        text="–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è.\n"
                             "–ü–µ—Ä–µ–¥ —ç—Ç–∏–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –Ω–∏–∂–µ.",
                        reply_markup=reply_markup
                    )

                created_count += 1

                if i < count:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–º—ã
                    await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 5 —Å–µ–∫—É–Ω–¥

            except RetryAfter as e:
                await asyncio.sleep(e.retry_after)
                continue
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ t√©m—ã {i}: {str(e)}")

        try:
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
        except RetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ–º –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        try:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")
        except RetryAfter as e:
            await asyncio.sleep(e.retry_after)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º: {str(e)}")

    return ConversationHandler.END

async def rename_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if not update.message.reply_to_message:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return WAITING_FOR_RENAME

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
    request_message_id = context.user_data.get('request_name_message_id')
    if not request_message_id or update.message.reply_to_message.message_id != request_message_id:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return WAITING_FOR_RENAME

    new_name = update.message.text
    topic_data = context.user_data.get('current_rename_topic')

    if not topic_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–µ")
        return ConversationHandler.END

    chat_id = topic_data['chat_id']
    topic_id = topic_data['topic_id']
    old_name = topic_data['old_name']
    number = old_name.split(":")[0]

    try:
        await context.bot.edit_forum_topic(
            chat_id=chat_id,
            message_thread_id=topic_id,
            name=f"{number}:{new_name}"
        )

        topics_dict[chat_id][topic_id] = f"{number}:{new_name}"
        if chat_id in rename_topics_dict:
            rename_topics_dict[chat_id].discard(topic_id)

        await update.message.reply_text(f"–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ {number}:{new_name}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if 'confirmation_message_id' in context.user_data:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=context.user_data['confirmation_message_id']
                )
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏
            if 'request_name_message_id' in context.user_data:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=context.user_data['request_name_message_id']
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}")

    context.user_data.pop('current_rename_topic', None)
    context.user_data.pop('confirmation_message_id', None)
    context.user_data.pop('request_name_message_id', None)
    return ConversationHandler.END

async def is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['creator', 'administrator']
    except Exception:
        return False

async def add_sos_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gadd —Å–ª–æ–≤–æ")
        return

    word = context.args[0].lower()
    if word in sos_words:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
        return

    sos_words.add(word)
    await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤")

async def delete_sos_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gdel —Å–ª–æ–≤–æ")
        return

    word = context.args[0].lower()
    if word not in sos_words:
        await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
        return

    sos_words.remove(word)
    await update.message.reply_text(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ SOS-—Å–ª–æ–≤")

async def list_sos_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_chat.id, update.effective_user.id, context):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if not sos_words:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤ –ø—É—Å—Ç")
        return

    words_list = "\n".join(sorted(sos_words))
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ SOS-—Å–ª–æ–≤:\n{words_list}")

async def check_sos_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    chat_id = update.message.chat_id
    message_thread_id = update.message.message_thread_id
    message_text = update.message.text.lower()

    logging.info(f"check_sos_word –≤—ã–∑–≤–∞–Ω. Chat ID: {chat_id}, Topic ID: {message_thread_id}, –¢–µ–∫—Å—Ç: {message_text}")

    if not message_thread_id:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–µ–º–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SOS-—Å–ª–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ SOS-—Å–ª–æ–≤–æ
    sos_found = False
    for word in sos_words:
        if word in message_text:
            sos_found = True
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ SOS-—Å–ª–æ–≤–æ: {word}")
            break

    if sos_found:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await create_active_topics_thread(chat_id, context)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            if chat_id not in active_topics:
                active_topics[chat_id] = set()
            active_topics[chat_id].add(message_thread_id)

            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ —á–µ—Ä–µ–∑ API
                chat = await context.bot.get_chat(chat_id)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                if (chat_id, message_thread_id) not in original_avatars:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    original_avatars[(chat_id, message_thread_id)] = None
                    logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ {message_thread_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {str(e)}")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã SOS emoji
            success = False
            for emoji_id in SOS_EMOJI_OPTIONS:
                try:
                    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É —Å ID: {emoji_id}")
                    await context.bot.edit_forum_topic(
                        chat_id=chat_id,
                        message_thread_id=message_thread_id,
                        icon_custom_emoji_id=emoji_id
                    )
                    logging.info(f"–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ SOS –∏–∫–æ–Ω–∫–∞ —Å ID: {emoji_id}")
                    success = True
                    break
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å emoji ID {emoji_id}: {str(e)}")
                    continue

            if not success:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å custom emoji, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                try:
                    current_name = topics_dict.get(chat_id, {}).get(message_thread_id, "–¢–µ–º–∞")
                    if not current_name.startswith("üö®"):
                        new_name = f"üö® {current_name}"
                        await context.bot.edit_forum_topic(
                            chat_id=chat_id,
                            message_thread_id=message_thread_id,
                            name=new_name
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å
                        if chat_id in topics_dict:
                            topics_dict[chat_id][message_thread_id] = new_name
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω SOS —ç–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {new_name}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã: {str(e)}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã"
            await update_active_topics_message(chat_id, context)

        except Exception as e:
            logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_sos_word: {str(e)}")

async def restore_topic_icon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    message_thread_id = update.message.message_thread_id

    if not message_thread_id:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–º–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    current_name = topics_dict.get(chat_id, {}).get(message_thread_id, None)

    if not current_name:
        await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å üö®
    if current_name.startswith("üö® "):
        try:
            # –£–±–∏—Ä–∞–µ–º "üö® " –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            new_name = current_name[2:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞: "üö® "

            await context.bot.edit_forum_topic(
                chat_id=chat_id,
                message_thread_id=message_thread_id,
                name=new_name
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å–ª–æ–≤–∞—Ä—å
            topics_dict[chat_id][message_thread_id] = new_name

            # –£–±–∏—Ä–∞–µ–º —Ç–µ–º—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if chat_id in active_topics and message_thread_id in active_topics[chat_id]:
                active_topics[chat_id].remove(message_thread_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã"
                await update_active_topics_message(chat_id, context)

            await update.message.reply_text(f"SOS —ç–º–æ–¥–∑–∏ —É–±—Ä–∞–Ω. –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_name}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã.")
    else:
        await update.message.reply_text("–í –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–µ–º—ã –Ω–µ—Ç SOS —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

async def game_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏–≥—Ä"""
    if not GAMES_ENABLED:
        await update.message.reply_text("üö´ –ò–≥—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    keyboard = [
        [InlineKeyboardButton("üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", callback_data='game_guess_number')],
        [InlineKeyboardButton("üéØ –ö–æ—Å—Ç–∏", callback_data='game_dice')],
        [InlineKeyboardButton("üÉè –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞", callback_data='game_rps')],
        [InlineKeyboardButton("‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data='game_tictactoe')],
        [InlineKeyboardButton("üÉè –ë–ª–µ–∫–¥–∂–µ–∫", callback_data='game_blackjack')],
        [InlineKeyboardButton("üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π", callback_data='game_battleship')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close_games')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n\n"
        "üé≤ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ - —É–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n"
        "üéØ –ö–æ—Å—Ç–∏ - –±—Ä–æ—Å—å—Ç–µ –∫–æ—Å—Ç–∏ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "üÉè –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ - —Å—ã–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞\n"
        "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ 3x3\n"
        "üÉè –ë–ª–µ–∫–¥–∂–µ–∫ - –Ω–∞–±–µ—Ä–∏—Ç–µ 21 –æ—á–∫–æ\n"
        "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π - –ø–æ—Ç–æ–ø–∏—Ç–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞\n\n"
        "üí° –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä - –ø–∏—à–∏—Ç–µ @sirdebar",
        reply_markup=reply_markup
    )

async def stopgame_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    global GAMES_ENABLED
    GAMES_ENABLED = not GAMES_ENABLED
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if GAMES_ENABLED else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    emoji = "‚úÖ" if GAMES_ENABLED else "üö´"
    
    await update.message.reply_text(f"{emoji} –ò–≥—Ä—ã {status}")

async def game_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if not GAMES_ENABLED and not query.data == 'close_games':
        await query.edit_message_text("üö´ –ò–≥—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return

    if query.data == 'game_guess_number':
        await start_guess_number_game(update, context)
    elif query.data == 'game_dice':
        await play_dice_game(update, context)
    elif query.data == 'game_rps':
        await start_rps_game(update, context)
    elif query.data == 'game_tictactoe':
        await start_tictactoe_game(update, context)
    elif query.data == 'game_blackjack':
        await start_blackjack_game(update, context)
    elif query.data == 'game_battleship':
        await start_battleship_game(update, context)
    elif query.data == 'close_games':
        await query.edit_message_text("üéÆ –ò–≥—Ä—ã –∑–∞–∫—Ä—ã—Ç—ã")
    elif query.data.startswith('rps_'):
        await handle_rps_choice(update, context)
    elif query.data.startswith('ttt_'):
        await handle_tictactoe_move(update, context)
    elif query.data.startswith('bj_'):
        await handle_blackjack_action(update, context)
    elif query.data.startswith('bs_'):
        await handle_battleship_move(update, context)

async def start_guess_number_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ"""
    query = update.callback_query
    user_id = query.from_user.id
    
    number = random.randint(1, 100)
    guess_numbers[user_id] = {
        'number': number,
        'attempts': 0,
        'max_attempts': 7
    }
    
    await query.edit_message_text(
        "üé≤ –ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'\n\n"
        "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å {guess_numbers[user_id]['max_attempts']} –ø–æ–ø—ã—Ç–æ–∫!\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ:"
    )
    
    context.user_data['playing_guess'] = True
    return PLAYING_GUESS_NUMBER

async def handle_guess_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ"""
    if not context.user_data.get('playing_guess'):
        return
    
    user_id = update.effective_user.id
    
    if user_id not in guess_numbers:
        await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /game")
        context.user_data['playing_guess'] = False
        return ConversationHandler.END
    
    try:
        guess = int(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return PLAYING_GUESS_NUMBER
    
    game_data = guess_numbers[user_id]
    game_data['attempts'] += 1
    target = game_data['number']
    
    if guess == target:
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {target} –∑–∞ {game_data['attempts']} –ø–æ–ø—ã—Ç–æ–∫!"
        )
        del guess_numbers[user_id]
        context.user_data['playing_guess'] = False
        return ConversationHandler.END
    
    elif game_data['attempts'] >= game_data['max_attempts']:
        await update.message.reply_text(
            f"üòî –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ {target}.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /game"
        )
        del guess_numbers[user_id]
        context.user_data['playing_guess'] = False
        return ConversationHandler.END
    
    else:
        hint = "–±–æ–ª—å—à–µ" if guess < target else "–º–µ–Ω—å—à–µ"
        remaining = game_data['max_attempts'] - game_data['attempts']
        await update.message.reply_text(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {hint} —á–µ–º {guess}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"
        )
        return PLAYING_GUESS_NUMBER

async def play_dice_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏"""
    query = update.callback_query
    
    user_dice = random.randint(1, 6)
    bot_dice = random.randint(1, 6)
    
    dice_emoji = {1: "‚öÄ", 2: "‚öÅ", 3: "‚öÇ", 4: "‚öÉ", 5: "‚öÑ", 6: "‚öÖ"}
    
    if user_dice > bot_dice:
        result = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
    elif user_dice < bot_dice:
        result = "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
    else:
        result = "ü§ù –ù–∏—á—å—è!"
    
    await query.edit_message_text(
        f"üéØ –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏\n\n"
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {dice_emoji[user_dice]} ({user_dice})\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç–∞: {dice_emoji[bot_dice]} ({bot_dice})\n\n"
        f"{result}"
    )

async def start_rps_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞"""
    query = update.callback_query
    
    keyboard = [
        [InlineKeyboardButton("üóø –ö–∞–º–µ–Ω—å", callback_data='rps_rock')],
        [InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data='rps_scissors')],
        [InlineKeyboardButton("üìÑ –ë—É–º–∞–≥–∞", callback_data='rps_paper')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üÉè –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
        reply_markup=reply_markup
    )

async def handle_rps_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞"""
    query = update.callback_query
    user_choice = query.data.split('_')[1]
    bot_choice = random.choice(['rock', 'scissors', 'paper'])
    
    choices = {
        'rock': 'üóø –ö–∞–º–µ–Ω—å',
        'scissors': '‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã',
        'paper': 'üìÑ –ë—É–º–∞–≥–∞'
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if user_choice == bot_choice:
        result = "ü§ù –ù–∏—á—å—è!"
    elif (user_choice == 'rock' and bot_choice == 'scissors') or \
         (user_choice == 'scissors' and bot_choice == 'paper') or \
         (user_choice == 'paper' and bot_choice == 'rock'):
        result = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
    else:
        result = "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
    
    await query.edit_message_text(
        f"üÉè –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\n\n"
        f"–í–∞—à –≤—ã–±–æ—Ä: {choices[user_choice]}\n"
        f"–í—ã–±–æ—Ä –±–æ—Ç–∞: {choices[bot_choice]}\n\n"
        f"{result}"
    )

async def start_tictactoe_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
    tic_tac_toe_games[user_id] = {
        'board': [' ' for _ in range(9)],
        'current_player': 'X'  # X - –∏–≥—Ä–æ–∫, O - –±–æ—Ç
    }
    
    await query.edit_message_text(
        "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n\n"
        "–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∫—Ä–µ—Å—Ç–∏–∫–∞–º–∏ (X), –±–æ—Ç - –Ω–æ–ª–∏–∫–∞–º–∏ (O)\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:",
        reply_markup=get_tictactoe_keyboard(user_id)
    )

def get_tictactoe_keyboard(user_id: int):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤"""
    if user_id not in tic_tac_toe_games:
        return None
    
    board = tic_tac_toe_games[user_id]['board']
    keyboard = []
    
    for i in range(3):
        row = []
        for j in range(3):
            pos = i * 3 + j
            cell = board[pos] if board[pos] != ' ' else '‚¨ú'
            row.append(InlineKeyboardButton(cell, callback_data=f'ttt_{pos}'))
        keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)

async def handle_tictactoe_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ–¥ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    position = int(query.data.split('_')[1])
    
    if user_id not in tic_tac_toe_games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = tic_tac_toe_games[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
    if game['board'][position] != ' ':
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
        return
    
    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    game['board'][position] = 'X'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
    winner = check_tictactoe_winner(game['board'])
    if winner == 'X':
        await query.edit_message_text(
            "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n\n"
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!",
            reply_markup=get_tictactoe_keyboard(user_id)
        )
        del tic_tac_toe_games[user_id]
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é
    if ' ' not in game['board']:
        await query.edit_message_text(
            "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n\n"
            "ü§ù –ù–∏—á—å—è!",
            reply_markup=get_tictactoe_keyboard(user_id)
        )
        del tic_tac_toe_games[user_id]
        return
    
    # –•–æ–¥ –±–æ—Ç–∞
    bot_move = get_bot_tictactoe_move(game['board'])
    game['board'][bot_move] = 'O'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –±–æ—Ç–∞
    winner = check_tictactoe_winner(game['board'])
    if winner == 'O':
        await query.edit_message_text(
            "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n\n"
            "üòî –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!",
            reply_markup=get_tictactoe_keyboard(user_id)
        )
        del tic_tac_toe_games[user_id]
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏—á—å—é –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞
    if ' ' not in game['board']:
        await query.edit_message_text(
            "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n\n"
            "ü§ù –ù–∏—á—å—è!",
            reply_markup=get_tictactoe_keyboard(user_id)
        )
        del tic_tac_toe_games[user_id]
        return
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
    await query.edit_message_text(
        "‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏\n\n"
        "–í–∞—à —Ö–æ–¥:",
        reply_markup=get_tictactoe_keyboard(user_id)
    )

def check_tictactoe_winner(board):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]              # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]
    
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != ' ':
            return board[combo[0]]
    return None

def get_bot_tictactoe_move(board):
    """–ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –±–æ—Ç–∞ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤-–Ω–æ–ª–∏–∫–æ–≤"""
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∏–≥—Ä–∞—Ç—å, –ø–æ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    for player in ['O', 'X']:
        for i in range(9):
            if board[i] == ' ':
                board[i] = player
                if check_tictactoe_winner(board) == player:
                    board[i] = ' '
                    return i
                board[i] = ' '
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö —Ö–æ–¥–æ–≤, –∑–∞–Ω–∏–º–∞–µ–º —Ü–µ–Ω—Ç—Ä –∏–ª–∏ —É–≥–æ–ª
    if board[4] == ' ':
        return 4
    
    for corner in [0, 2, 6, 8]:
        if board[corner] == ' ':
            return corner
    
    # –ò–Ω–∞—á–µ –ª—é–±–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è –∫–ª–µ—Ç–∫–∞
    for i in range(9):
        if board[i] == ' ':
            return i

async def start_blackjack_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –±–ª–µ–∫–¥–∂–µ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
    suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']
    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
    deck = [(rank, suit) for suit in suits for rank in ranks]
    random.shuffle(deck)
    
    # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    player_hand = [deck.pop(), deck.pop()]
    dealer_hand = [deck.pop(), deck.pop()]
    
    blackjack_games[user_id] = {
        'deck': deck,
        'player_hand': player_hand,
        'dealer_hand': dealer_hand,
        'game_over': False
    }
    
    player_score = calculate_blackjack_score(player_hand)
    dealer_visible_score = calculate_blackjack_score([dealer_hand[0]])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–µ–∫–¥–∂–µ–∫ —É –∏–≥—Ä–æ–∫–∞
    if player_score == 21:
        dealer_score = calculate_blackjack_score(dealer_hand)
        if dealer_score == 21:
            result = "ü§ù –ù–∏—á—å—è! –£ –æ–±–æ–∏—Ö –±–ª–µ–∫–¥–∂–µ–∫!"
        else:
            result = "üéâ –ë–ª–µ–∫–¥–∂–µ–∫! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
        
        await query.edit_message_text(
            f"üÉè –ë–ª–µ–∫–¥–∂–µ–∫\n\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_blackjack_hand(player_hand)} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_blackjack_hand(dealer_hand)} = {dealer_score}\n\n"
            f"{result}"
        )
        del blackjack_games[user_id]
        return
    
    keyboard = [
        [InlineKeyboardButton("üÉè –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data='bj_hit')],
        [InlineKeyboardButton("‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data='bj_stand')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üÉè –ë–ª–µ–∫–¥–∂–µ–∫\n\n"
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_blackjack_hand(player_hand)} = {player_score}\n"
        f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {format_blackjack_hand([dealer_hand[0]])} = {dealer_visible_score}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

def calculate_blackjack_score(hand):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—á–µ—Ç –≤ –±–ª–µ–∫–¥–∂–µ–∫–µ"""
    score = 0
    aces = 0
    
    for rank, suit in hand:
        if rank in ['J', 'Q', 'K']:
            score += 10
        elif rank == 'A':
            aces += 1
            score += 11
        else:
            score += int(rank)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É–∑—ã
    while score > 21 and aces > 0:
        score -= 10
        aces -= 1
    
    return score

def format_blackjack_hand(hand):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä—É–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return ' '.join([f"{rank}{suit}" for rank, suit in hand])

async def handle_blackjack_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–ª–µ–∫–¥–∂–µ–∫–µ"""
    query = update.callback_query
    user_id = query.from_user.id
    action = query.data.split('_')[1]
    
    if user_id not in blackjack_games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = blackjack_games[user_id]
    
    if action == 'hit':
        # –ò–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—É
        card = game['deck'].pop()
        game['player_hand'].append(card)
        player_score = calculate_blackjack_score(game['player_hand'])
        
        if player_score > 21:
            # –ü–µ—Ä–µ–±–æ—Ä —É –∏–≥—Ä–æ–∫–∞
            dealer_score = calculate_blackjack_score(game['dealer_hand'])
            await query.edit_message_text(
                f"üÉè –ë–ª–µ–∫–¥–∂–µ–∫\n\n"
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_blackjack_hand(game['player_hand'])} = {player_score}\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_blackjack_hand(game['dealer_hand'])} = {dealer_score}\n\n"
                f"üòî –ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
            )
            del blackjack_games[user_id]
            return
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        dealer_visible_score = calculate_blackjack_score([game['dealer_hand'][0]])
        keyboard = [
            [InlineKeyboardButton("üÉè –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data='bj_hit')],
            [InlineKeyboardButton("‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data='bj_stand')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üÉè –ë–ª–µ–∫–¥–∂–µ–∫\n\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_blackjack_hand(game['player_hand'])} = {player_score}\n"
            f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {format_blackjack_hand([game['dealer_hand'][0]])} = {dealer_visible_score}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif action == 'stand':
        # –ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —Ö–æ–¥ –¥–∏–ª–µ—Ä–∞
        player_score = calculate_blackjack_score(game['player_hand'])
        
        # –î–∏–ª–µ—Ä –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17
        while calculate_blackjack_score(game['dealer_hand']) < 17:
            card = game['deck'].pop()
            game['dealer_hand'].append(card)
        
        dealer_score = calculate_blackjack_score(game['dealer_hand'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if dealer_score > 21:
            result = "üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
        elif dealer_score > player_score:
            result = "üòî –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!"
        elif player_score > dealer_score:
            result = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
        else:
            result = "ü§ù –ù–∏—á—å—è!"
        
        await query.edit_message_text(
            f"üÉè –ë–ª–µ–∫–¥–∂–µ–∫\n\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_blackjack_hand(game['player_hand'])} = {player_score}\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {format_blackjack_hand(game['dealer_hand'])} = {dealer_score}\n\n"
            f"{result}"
        )
        del blackjack_games[user_id]

async def start_battleship_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–π"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –±–æ—Ç–∞
    player_field = create_battleship_field()
    bot_field = create_battleship_field()
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏
    place_battleship_ships(bot_field)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –±–æ—Ç–∞ (—Å–∫—Ä—ã—Ç–æ–µ)
    bot_visible_field = [['üåä' for _ in range(6)] for _ in range(6)]
    
    battleship_games[user_id] = {
        'player_field': player_field,
        'bot_field': bot_field,
        'bot_visible_field': bot_visible_field,
        'ships_to_place': 3,  # 3 –∫–æ—Ä–∞–±–ª—è –ø–æ 1 –∫–ª–µ—Ç–∫–µ
        'placing_ships': True,
        'player_ships': 0,
        'bot_ships': 3,
        'current_turn': 'player'
    }
    
    await query.edit_message_text(
        "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
        "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ 3 –∫–æ—Ä–∞–±–ª—è –Ω–∞ —Å–≤–æ–µ–º –ø–æ–ª–µ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è:",
        reply_markup=get_battleship_keyboard(user_id, show_player_field=True)
    )

def create_battleship_field():
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –º–æ—Ä—Å–∫–æ–≥–æ –±–æ—è 6x6"""
    return [['üåä' for _ in range(6)] for _ in range(6)]

def place_battleship_ships(field):
    """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –ø–æ–ª–µ –±–æ—Ç–∞"""
    ships_placed = 0
    while ships_placed < 3:
        row = random.randint(0, 5)
        col = random.randint(0, 5)
        if field[row][col] == 'üåä':
            field[row][col] = 'üö¢'
            ships_placed += 1

def get_battleship_keyboard(user_id: int, show_player_field: bool = False):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ—Ä—Å–∫–æ–≥–æ –±–æ—è"""
    if user_id not in battleship_games:
        return None
    
    game = battleship_games[user_id]
    keyboard = []
    
    if show_player_field:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–π
        field = game['player_field']
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –±–æ—Ç–∞ –¥–ª—è –∞—Ç–∞–∫–∏
        field = game['bot_visible_field']
    
    for i in range(6):
        row = []
        for j in range(6):
            cell = field[i][j]
            callback_data = f'bs_{i}_{j}_{"place" if show_player_field else "attack"}'
            row.append(InlineKeyboardButton(cell, callback_data=callback_data))
        keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)

async def handle_battleship_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ–¥ –≤ –º–æ—Ä—Å–∫–æ–º –±–æ—é"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if user_id not in battleship_games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    game = battleship_games[user_id]
    data_parts = query.data.split('_')
    row, col, action = int(data_parts[1]), int(data_parts[2]), data_parts[3]
    
    if action == 'place':
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –∏–≥—Ä–æ–∫–∞
        if game['player_field'][row][col] == 'üåä':
            game['player_field'][row][col] = 'üö¢'
            game['ships_to_place'] -= 1
            game['player_ships'] += 1
            
            if game['ships_to_place'] == 0:
                # –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
                game['placing_ships'] = False
                await query.edit_message_text(
                    "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                    "–ö–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π!\n"
                    "–ê—Ç–∞–∫—É–π—Ç–µ –ø–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:",
                    reply_markup=get_battleship_keyboard(user_id, show_player_field=False)
                )
            else:
                await query.edit_message_text(
                    f"üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª–µ–π: {game['ships_to_place']}\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è:",
                    reply_markup=get_battleship_keyboard(user_id, show_player_field=True)
                )
        else:
            await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!")
    
    elif action == 'attack':
        # –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        if game['bot_visible_field'][row][col] not in ['üåä', 'üî•']:
            await query.answer("–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É!")
            return
        
        if game['bot_field'][row][col] == 'üö¢':
            # –ü–æ–ø–∞–¥–∞–Ω–∏–µ
            game['bot_visible_field'][row][col] = 'üî•'
            game['bot_ships'] -= 1
            
            if game['bot_ships'] == 0:
                # –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
                await query.edit_message_text(
                    "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ—Ç–æ–ø–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!",
                    reply_markup=get_battleship_keyboard(user_id, show_player_field=False)
                )
                del battleship_games[user_id]
                return
            
            await query.edit_message_text(
                f"üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                f"üî• –ü–æ–ø–∞–¥–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {game['bot_ships']}\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∞—Ç–∞–∫—É:",
                reply_markup=get_battleship_keyboard(user_id, show_player_field=False)
            )
        else:
            # –ü—Ä–æ–º–∞—Ö
            game['bot_visible_field'][row][col] = 'üí®'
            
            # –•–æ–¥ –±–æ—Ç–∞
            bot_row, bot_col = get_bot_battleship_move(game['player_field'])
            if bot_row is not None:
                if game['player_field'][bot_row][bot_col] == 'üö¢':
                    # –ë–æ—Ç –ø–æ–ø–∞–ª
                    game['player_field'][bot_row][bot_col] = 'üî•'
                    game['player_ships'] -= 1
                    
                    if game['player_ships'] == 0:
                        # –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª
                        await query.edit_message_text(
                            "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                            "üòî –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ—Ç–æ–ø–∏–ª –≤—Å–µ –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
                        )
                        del battleship_games[user_id]
                        return
                    
                    await query.edit_message_text(
                        f"üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                        f"üí® –ü—Ä–æ–º–∞—Ö! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–ø–∞–ª –≤ –≤–∞—à –∫–æ—Ä–∞–±–ª—å!\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –≤–∞—à–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π: {game['player_ships']}\n"
                        "–í–∞—à —Ö–æ–¥:",
                        reply_markup=get_battleship_keyboard(user_id, show_player_field=False)
                    )
                else:
                    # –ë–æ—Ç –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è
                    game['player_field'][bot_row][bot_col] = 'üí®'
                    await query.edit_message_text(
                        "üö¢ –ú–æ—Ä—Å–∫–æ–π –±–æ–π\n\n"
                        "üí® –ü—Ä–æ–º–∞—Ö! –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ç–æ–∂–µ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è.\n"
                        "–í–∞—à —Ö–æ–¥:",
                        reply_markup=get_battleship_keyboard(user_id, show_player_field=False)
                    )

def get_bot_battleship_move(player_field):
    """–ü–æ–ª—É—á–∏—Ç—å —Ö–æ–¥ –±–æ—Ç–∞ –¥–ª—è –º–æ—Ä—Å–∫–æ–≥–æ –±–æ—è"""
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–µ–∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
    available_cells = []
    for i in range(6):
        for j in range(6):
            if player_field[i][j] in ['üåä', 'üö¢']:
                available_cells.append((i, j))
    
    if available_cells:
        return random.choice(available_cells)
    return None, None

async def post_init(application):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    pass

def main():
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(request_topic_name, pattern='^create_topic$'),
            CallbackQueryHandler(request_topic_id, pattern='^delete_topic$'),
            CallbackQueryHandler(request_broadcast_message, pattern='^create_broadcast$'),
            CallbackQueryHandler(request_rename_topics_count, pattern='^create_rename_topics$'),
            CallbackQueryHandler(button_handler, pattern='^confirm_rename_'),
            CallbackQueryHandler(start_guess_number_game, pattern='^game_guess_number$')
        ],
        states={
            WAITING_FOR_TOPIC_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_topic_with_name)],
            WAITING_FOR_TOPIC_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_topic_by_id)],
            WAITING_FOR_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, send_broadcast)],
            WAITING_FOR_RENAME_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, create_rename_topics)],
            WAITING_FOR_RENAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, rename_topic)],
            PLAYING_GUESS_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_guess_number)]
        },
        fallbacks=[]
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("worker", worker_command))
    application.add_handler(CommandHandler("gadd", add_sos_word))
    application.add_handler(CommandHandler("gdel", delete_sos_word))
    application.add_handler(CommandHandler("gall", list_sos_words))
    application.add_handler(CommandHandler("grestore", restore_topic_icon))
    application.add_handler(CommandHandler("game", game_command))
    application.add_handler(CommandHandler("stopgame", stopgame_command))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(game_callback_handler, pattern='^(game_|rps_|ttt_|bj_|bs_|close_games)'))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()